<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你好啊！</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>你好啊，欢迎来到我的个人主页哈哈哈哈哈哈哈哈哈<br>下面这些是hexo模板的命令</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>live2d导入</title>
      <link href="/posts/c1c6.html"/>
      <url>/posts/c1c6.html</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/c1c6/image-20201014154751316.png" alt="image-20201014154751316"></p><p>简单的一张图展示一下效果</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><pre><code>&lt;script&gt;    L2Dwidget.init({        "model": {　　　　　　　//jsonpath控制显示那个live2d模型            jsonPath: "https://unpkg.com/live2d-widget-model-chitose@1.0.5/assets/chitose.model.json",            "scale": 1        },        "display": {            "position": "right", //live2d的表现位置            "width": 150,  //live2d的宽度            "height": 300, //live2d的高度            "hOffset": 0, //live2d的x坐标            "vOffset": -20 //live2d的y坐标        },        "mobile": {            "show": true,            "scale": 0.5        },        "react": {            "opacityDefault": 0.7,            "opacityOnHover": 0.2        }    });&lt;/script&gt;</code></pre><p>你有很多选择</p><pre><code>live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16</code></pre><p><img src="/posts/c1c6/image-20201014155209386.png" alt="image-20201014155209386"></p><p>替换的时候这两个东西都要替换到，自己做尝试吧。</p>]]></content>
      
      
      <categories>
          
          <category> live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习手册</title>
      <link href="/posts/hexolearn.html"/>
      <url>/posts/hexolearn.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/victoryxa/article/details/103733655?spm=1001.2014.3001.5501">首先参照这个人的项目手册</a></p><p>还有一些常用的git命令</p><p>清除渲染的模板</p><pre><code>hexo clean</code></pre><p>Hexo会根据配置文件渲染出一套静态页面</p><pre><code>hexo g</code></pre><p>Hexo部署网页</p><pre><code>hexo s</code></pre><p>将上一步渲染出的一系列文件上传至至Github Pages</p><pre><code>hexo d</code></pre><p>也可以直接输入此命令，直接完成渲染和上传</p><pre><code>hexo g -d</code></pre><p>#建一个文章</p><pre><code>hexo new "文章名字"</code></pre><p>这个人的教程基本跟github的教程相同，不过步骤更精细一些是个非常好的文章，</p><p>一套流程跟下来之后大概你的项目就搭建好了这个时候需要写博客了，</p><p>关于博客的创作你可能会遇到图片插入的问题，那么如何解决这个问题呢。</p><p>我们都知道：</p><p>Hexo是一个静态的博客网站生成器，生成一个博客只需要分分钟的时间就能搞定。</p><p>Hexo的博文是支持Markdown格式的，发表一篇文章只需要简简单单的几个命令。</p><p><code>hexo new '文章'</code>就会生成一个名为’文章’的md文件。</p><p><img src="/posts/hexolearn/641.png" alt="641"></p><p>在图中位置添加描述，分类以及标签，有利于搜索分类（以下为模板）。</p><pre><code>---title: #你的博客文章名date: 2020-09-07 09:25:00 #文章时间author: GavenLee #作者img: /source/images/xxx.jpg #图片top: true #是否顶置cover: true #是否在引导页轮播coverImg: /images/1.jpg #轮播图片password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 #阅读密码这里被加密toc: false #tocmathjax: false #mathjaxsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdown #分类tags: #标签  - Typora  - Markdownabbrlink: HexoLearn #链接---</code></pre><h2 id="如何向hexo博客中插入图片"><a href="#如何向hexo博客中插入图片" class="headerlink" title="如何向hexo博客中插入图片"></a>如何向hexo博客中插入图片</h2><p>众所周知，在md文件中插入图片的语法为<code>![]()</code>。</p><p>其中<strong>方括号</strong>是图片描述，<strong>圆括号</strong>是图片路径。</p><p>一般来说有三种图片路径，分别是<strong>相对路径，绝对路径和网络路径</strong>。</p><p>所谓的网络路径就是直接引用网上的图片，直接复制图片地址，放在圆括号中就完事了。</p><p>这种方式十分的方便，但是也存在一定的问题：</p><ul><li>图片失效导致无法加载；</li><li>打开网页后要再请求加载图片；</li><li>原网站限制，如微信公众号的图片会变得不可见等。</li></ul><p>这种方式算是有利有弊。</p><p>绝对路径是图片在计算机中的绝对位置，相对路径是相对于当前文件的路径。</p><p>由于我们的博客是要部署在网站上，部署后会生成新的文件目录，所以我们选择使用相对路径的方式。</p><p>在hexo中使用<strong>文章资源文件夹</strong>需要在<code>config.yaml</code>文件中更改一下配置：</p><pre><code>post_asset_folder: true</code></pre><p>当该配置被应用后，使用<code>hexo new</code>命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。</p><blockquote><p>由于项目会生成新的文件目录，同时会解析Markdown中的图片路径，会导致一个问题。</p><p>如在一个文件目录下，博客名为<code>1.md</code>，相应的存在一个<code>1</code>文件夹存放图片<code>image.jpg</code>。</p><p>在Typora编辑器中，普通的md文件使用<code>![](1/image.jpg)</code>能在编辑器中正常显示图片。</p><p>在hexo中，按理说应该是使用<code>![](image.jpg)</code>，但网页中却无法正常显示。</p><p>此时应该使用这样的方式来引入图片：</p><pre><code>{% asset_img image.jpg 这是一张图片 %}</code></pre></blockquote><p>虽然可以正常引用图片了，但是这种引用图片的方式只有一句话能形容，wtf。</p><h2 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h2><p>插件hexo-renderer-marked解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在<code>config.yaml</code>中更改配置如下：</p><pre><code>post_asset_folder: truemarked:  prependRoot: true  postAsset: true</code></pre><p>之后就可以在使用<code>![](image.jpg)</code>的方式愉快的插入图片了。</p><p>我们做了这么多都是为了方便，那么为什么不再方便一点呢。</p><h2 id="hexo与Typora的完美结合"><a href="#hexo与Typora的完美结合" class="headerlink" title="hexo与Typora的完美结合"></a>hexo与Typora的完美结合</h2><p>上述是从文章资源文件夹中引用图片，前提是<strong>先将图片放入到文章资源文件夹</strong>，如果图片数量众多的话，一张一张的放很影响效率。但是不用怕，我们有很方便的解决方法。</p><p><strong>Typora</strong>是我非常喜欢的Markdown文本编辑器，在之前的文章中也介绍过一点。</p><p>Typora对于插入图片的支持做得非常好，在<code>文件-&gt;偏好设置</code>或者直接<code>&lt;C-,&gt;</code>进入设置。</p><p><img src="/posts/hexolearn/456.png" alt="456"></p><p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。</p><p>如复制网络路径的图片<code>https://...../image.jpg</code>粘贴到Typora中叫<code>文章名</code>的文章后，图片会自动变为<code>![](文章名/image.jpg)</code>。</p><p>但我们知道部署后，文件路径是不同的，所以当我们插入完所有的图片后，我们还需要删除每个图片路径中的<code>文件名/</code>。不慌，也很简单。</p><p>在Typora编辑器中，使用<code>&lt;C-f&gt;</code>快捷键，将所有的<code>文章名/</code>替换为空即可删除。</p><p><img src="/posts/hexolearn/123.png" alt="123"></p><p>删除文件名</p><p>然后再将博客上传，图片就会随着文章一起打包。</p><p>在网页中就可以看到正常显示的图片，大功告成。</p><h2 id="hexo内置的图标库"><a href="#hexo内置的图标库" class="headerlink" title="hexo内置的图标库"></a>hexo内置的图标库</h2><p>以我的matey主题为例</p><p>在主题路径下的</p><pre><code>source\libs\awesome\css\all.css</code></pre><p>没错，该项目的图标都在这个css中</p><p>之后去这个<a href="http://www.fontawesome.com.cn/">网站</a></p><p>图标都在这里有，要看好自己的版本，用的时候现在你的css里找找有没有这个css，有的话直接调用就好。</p><p><img src="/posts/hexolearn/image-20201014141300760.png" alt="image-20201014141300760"></p><p>当然，你也可以去<a href="www.iconfont.cn">阿里图标库</a></p><p>具体怎么做参照<a href="https://blog.csdn.net/u012208219/article/details/106883012">这里</a></p><p>记得用的时候class内容前面加iconfont空格</p><h1 id="创建新的也页面"><a href="#创建新的也页面" class="headerlink" title="创建新的也页面"></a>创建新的也页面</h1><p>在博客根目录</p><pre class=" language-cmd"><code class="language-cmd">hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><p>— title: tags date: 2018-09-30 18:23:38 type: “tags” layout: “tags” —</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限验证的方法（补充中）</title>
      <link href="/posts/26ef.html"/>
      <url>/posts/26ef.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">最近写个自己的网站玩可能会用到权限验证，先在网上找点方法。</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">提示：以下是本篇文章正文内容，下面案例可供参考</font></p><font color="#999AAA"><h1 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h1><p><font color="#999AAA">用二进制验证</font></p><font color="#999AAA"><p>可以推荐你使用 按位与  一般符号是 &amp; 来进行操作。<br>具体举例：操作1=1，操作2=2，操作3=4，操作4=8，操作5=16<br>为什么要使用这样的数字呢？<br>因为它们都是2的倍数，这样就可以保证它们转化为的二进制只占其中的一位。<br>具体的：1=00000001，2=00000010，4=00000100，8=00001000，16=00010000<br>你可以看到  每个权限其实只占了一个8位的其中的一位。<br>假设A具有操作1，操作3，操作4的权限，那么A的权限值为：1+4+8=13   它的二进制为00001101<br>现在你要判断A是否具有操作3的权限，只需要判断  13&amp;4   是否等于 4就可以。<br>具体的：<br>   00001101&amp; 00000100</p><hr><p> 00000100</p><p>可以看到如果你有此权限的话，该值是等于操作的权限值的。<br>我们再来验证A是否具有操作2的权限：<br>   00001101&amp; 00000010</p><hr><p>  00000000<br>看到了吧，值等于0，表示A没有操作2的权限。<br>你只要再此基础上封装一下这个操作，就可以实现全线的验证了！<br>比如：</p><pre class=" language-c"><code class="language-c">public string validate（<span class="token keyword">int</span> powers，<span class="token keyword">int</span> power）<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//powers用户具有的权限,power具体的一个权限</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>powers<span class="token operator">&amp;</span>power<span class="token operator">!=</span>power<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token string">"你没有该操作权限！"</span><span class="token punctuation">;</span>       <span class="token keyword">else</span>          <span class="token keyword">return</span> <span class="token string">"你具有该操作权限！"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><p>ok   大功告成！</p></font></font>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL以时间作为条件加不加引号的问题探讨</title>
      <link href="/posts/50fd.html"/>
      <url>/posts/50fd.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><p><font color="#999AAA">有时间格式的数据作为检索条件时遇到了一个比较有趣的问题</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p><font color="#999AAA">有这么一条sql语句：</font></p><font color="#999AAA"><p><img src="/posts/50fd/20201008163818173.png" alt="在这里插入图片描述"><br>理论上说这个也能检索到下面的那些数据但实际上并没有获取到下面以1900年份开头的数据<br><img src="/posts/50fd/20201008164118448.png" alt="在这里插入图片描述"><br>下面三个图是思考是否为转型之后再比对的结果然后又产生了新的问题。<br><img src="/posts/50fd/20201008165743216.png" alt="在这里插入图片描述"><br><img src="/posts/50fd/20201008165846181.png" alt="在这里插入图片描述"><br><img src="/posts/50fd/20201008165930250.png" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span>为什么图一检索不到图二里的数据？（图一图二）（未解决）<span class="token number">2</span><span class="token punctuation">.</span>图三图四？横杠的作用？对比前的准备？（已解决）<span class="token number">3</span><span class="token punctuation">.</span>图<span class="token number">4</span>图<span class="token number">5</span>？？？？？？（与一类似未解决）</code></pre> </font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p><font color="#999AAA">ok项目原因找到了，自己给自己摆了个乌龙，该时间数据数据库类型为varchar，所以像图一这种时间的对比方式是不正确的，应该先将数据库内的数据类型转换为时间格式在作比较。<br>问题2是因为图中为字符出串的对比（逐个字符按顺序对比），<br>剩余两个问题还未解决</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p><font color="#999AAA">像数据库里是时间相关的格式是可以进行直接的对比的但是必须要加单引号！如果是varchar类型的话要用</font></p><font color="#999AAA"><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//对比时间的条件</span><span class="token function">STR_TO_DATE</span><span class="token punctuation">(</span>对应时间列<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token function">STR_TO_DATE</span><span class="token punctuation">(</span><span class="token string">'传来的参数'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>差不多这种形式格式来对比，但实际上还是会检索不到1900年份的数据？（千年虫问题？还是数据库在做对比的时候底层逻辑与人脑逻辑不同）。我会保留考虑这个问题</p></font>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue心得</title>
      <link href="/posts/ecb7.html"/>
      <url>/posts/ecb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录vue学习过程"><a href="#记录vue学习过程" class="headerlink" title="记录vue学习过程"></a>记录vue学习过程</h1><p><font color="#999AAA">vue学习心得</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">心得过程为跟随bilibili狂神说的vue视频如果喜欢的话请多多支持狂神说，如果有什么错误的地方欢迎指出</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="#999AAA">学学vue，听懂掌声！</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><font color="#999AAA"><h1 id="一、vue？"><a href="#一、vue？" class="headerlink" title="一、vue？"></a>一、vue？</h1><p>下边有几个问题你要带着：<br>什么是mvvm思想（可对比mvc）？<br><a href="https://blog.csdn.net/weixin_38318244/article/details/85037067">初步了解vue请点击我</a></p><p><font color="#999AAA">上方链接的文章是一个小姐姐的创作，个人认为写得比较好比较全，欢迎参考</font></p><font color="#999AAA"><h1 id="二、学习过程"><a href="#二、学习过程" class="headerlink" title="二、学习过程"></a>二、学习过程</h1><h2 id="1-初步认识vue的构建思想！"><a href="#1-初步认识vue的构建思想！" class="headerlink" title="1.初步认识vue的构建思想！"></a>1.初步认识vue的构建思想！</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><p>直接建一个新网页然后运行这段代码，在控制台中修改vm.message的值和dataa的值，你会发现vue的传参方式无需刷新就会更新到界面，而js无法及时更新（只能通过对dom对象的修改或追加才能做到数据的更新），对于前端开发来说vue的这一功能是里程碑式的突破，而且vue还有着解耦合的mvvm思想，孰高孰低高低立判。</p><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开发环境版本，包含了有帮助的命令行警告 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token comment" spellcheck="true">//这里是view层（一名前端工程师需要做的基础）</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"vueapp"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>vuedata<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">"+这里用来验证是否需要拼字符串来显示+"</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>asd<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"jsapp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        var vm <span class="token operator">=</span> new <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#vueapp"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里是模型层</span>                vuedata<span class="token punctuation">:</span><span class="token string">"hello data"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//下面参数来查看vue的传参方式（类似键值对通过key来绑定value并且以{{key的形式绑定到页面元素上}}）</span>                asd<span class="token punctuation">:</span><span class="token string">"第二份"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面跟传统js代码做对比</span>        <span class="token comment" spellcheck="true">//在网页的控制台修改vm.message的值与dataa的值会发现vue的双重绑定的意义</span>        var jsdata <span class="token operator">=</span> <span class="token string">"js测试"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"jsapp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>jsdata<span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>疑惑：已然有了m（model）层与v(view)层那mv层在哪里啊<br>个人理解：双向绑定的这种形式就是mv层（抽象含义？）</p><p>当然以上并不是真正的vue写法，这只是对这个思想的展示，到了现在我们应该已经认识到：在制作前端的时候我们甚至不需要像之前那样写个假数据等交互的时候再修改（麻烦），我们只需要写个标签并在data里面声明标签的值该动态把值删掉，省去了假数据该动态的时间。</p><p>关键词：DOM监听与数据绑定</p><h2 id="2-指令"><a href="#2-指令" class="headerlink" title="2.指令"></a>2.指令</h2><p><font color="#999AAA">指令带有v-前缀，他们会在dom上应用特殊的响应式行为。例如v-bind</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//放在vueappdiv中展示下面的小作用</span><span class="token operator">&lt;</span>span v<span class="token operator">-</span>bind<span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"new Date()"</span><span class="token operator">></span>v<span class="token operator">-</span>bind样式展示，请鼠标悬停我。<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><font color="#999AAA">进阶：判断</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//放在vueappdiv里</span><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"panduan"</span><span class="token operator">></span>是对的<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>是错的<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment" spellcheck="true">//data同时加个参数</span>panduan<span class="token punctuation">:</span> true<span class="token punctuation">,</span></code></pre><p><font color="#999AAA">进阶：循环</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//声明div</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"vueitems"</span><span class="token operator">></span>这个用来测试循环（声明数组）<span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item/*便利每一项的命名*/ in items/*便利的数组名*/"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>list<span class="token comment" spellcheck="true">/*命名.数组名*/</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*&lt;span v-for="(item,index)/*便利每一项的命名*/</span> in items<span class="token comment" spellcheck="true">/*便利的数组名*/</span>"<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>list<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span>下标<span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//js</span>var vmitems <span class="token operator">=</span> new <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#vueitems"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                items<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>list<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>list<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>list<span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font color="#999AAA">循环判断都会了，不直接去干活？奥对，还有事件的监听。（方法必须绑定在method里）</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//html</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"vueshijian"</span><span class="token operator">></span><span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"asdd"</span><span class="token operator">></span>悬浮我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token comment" spellcheck="true">//js</span>var vmon <span class="token operator">=</span> new <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#vueshijian"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span><span class="token string">"我kiao！"</span><span class="token punctuation">,</span>                asd<span class="token punctuation">:</span><span class="token string">"这是点击事件"</span><span class="token punctuation">,</span>                panduan<span class="token punctuation">:</span> true<span class="token punctuation">,</span>                suanshu<span class="token punctuation">:</span><span class="token string">"这是悬浮事件"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>              asdaa<span class="token punctuation">:</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>vmon<span class="token punctuation">.</span>suanshu<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              asdd<span class="token punctuation">:</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是第二个方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>没啥心得就是基本事件</p><h2 id="3-axios（异步请求）"><a href="#3-axios（异步请求）" class="headerlink" title="3.axios（异步请求）"></a>3.axios（异步请求）</h2><p>因为vue是面向前端的，所以引入一个网络方面功能</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// An highlighted block</span><span class="token comment" spellcheck="true">//导入js</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//html</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"axios"</span> v<span class="token operator">-</span>clock<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>info<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//js</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#axios"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//请求的返回参数格式，必须和json字符串一样。</span>                info<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//钩子函数 链式编程</span>            axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个地方难理解axios.get('请求地址').then(response=>(this.info = response.data))</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//建立一个叫做data.json的文件放在一个根目录下（文件内内容如下）</span><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"学vue"</span><span class="token punctuation">,</span>  <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://vue.js.com"</span><span class="token punctuation">,</span>  <span class="token string">"page"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token string">"isNonProfit"</span><span class="token punctuation">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"street"</span><span class="token punctuation">:</span> <span class="token string">"街"</span><span class="token punctuation">,</span>    <span class="token string">"city"</span><span class="token punctuation">:</span><span class="token string">"城"</span><span class="token punctuation">,</span>    <span class="token string">"country"</span><span class="token punctuation">:</span> <span class="token string">"国"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"links"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"B站"</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.bilibili.com/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"4399"</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.4399.com/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"百度"</span><span class="token punctuation">,</span>      <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com/"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color="#999AAA"></font></font></font></font></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts饼图文字重叠问题及解决方法</title>
      <link href="/posts/11c4.html"/>
      <url>/posts/11c4.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">实现前台样式的时候发现饼状图文字部分重合了</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="#999AAA">实现前台样式的时候发现饼状图文字部分重合了如下面所示：</font><br><img src="/posts/11c4/20200919090601986.png" alt="在这里插入图片描述"></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">找了很多方法以下是个人总结的：</font></p><font color="#999AAA"><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h2><p><font color="#999AAA">代码如下,添加normal这段代码下面的textstyle控制字体的大小（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'类型'</span><span class="token punctuation">,</span>    minAngle<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//这个属性可以控制扇形区域的最小值，防止出现区域为0.01%之类的很小的山顶点不到的情况</span>    <span class="token comment" spellcheck="true">//这里还有其余的部分</span>    normal<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token function">formatter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>             let text <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> v<span class="token punctuation">.</span>name             <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                   <span class="token keyword">return</span> text<span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">return</span> text <span class="token operator">=</span> `$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>`                 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">16</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">return</span> text <span class="token operator">=</span> `$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">}</span>`                 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">return</span> text <span class="token operator">=</span> `$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">}</span>`                 <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">return</span> text <span class="token operator">=</span> `$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n$<span class="token punctuation">{</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">}</span>`                 <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//宪强加的防止标签覆盖</span>    textStyle<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//字体大小</span>        fontSize<span class="token punctuation">:</span> <span class="token number">12</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><img src="/posts/11c4/2020092408144479.png" alt="在这里插入图片描述"></p></font></font>]]></content>
      
      
      <categories>
          
          <category> eCharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
            <tag> eCharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分割（计数板）展示数字样式</title>
      <link href="/posts/2da0.html"/>
      <url>/posts/2da0.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">记录一次前端页面样式</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="#999AAA">写一个前端样式</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">提示：以下是本篇文章正文内容，下面案例可供参考</font></p><font color="#999AAA"><h1 id="一、目标展示"><a href="#一、目标展示" class="headerlink" title="一、目标展示"></a>一、目标展示</h1><p><img src="/posts/2da0/20200918141817715.png" alt="在这里插入图片描述"></p><p><font color="#999AAA">示例：将后台传来的整数分割成计数板显示</font></p><font color="#999AAA"><h1 id="二、写代码"><a href="#二、写代码" class="headerlink" title="二、写代码"></a>二、写代码</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h2><p><font color="#999AAA">思路如下：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">想法很简单：图形分为两部分，数字部分 跟 <span class="token number">0</span>部分，两部分拆分做每一位数字存在一个正方形（div）中，（肯定要把数字每位都拿出来以循环的方式放进div）将后台传来的一个整数先判断是几位数，不足六位数要补<span class="token number">0</span>同时判断的时候把每位数放入一个列表中然后输出数据的时候用。</code></pre><h2 id="2-代码展示"><a href="#2-代码展示" class="headerlink" title="2.代码展示"></a>2.代码展示</h2><p><font color="#999AAA">h5代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>h2 class<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>全国供应商数量<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>   <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"main-center-number"</span> id<span class="token operator">=</span><span class="token string">"chinanum"</span><span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> color由js判断内容是否不为<span class="token number">0</span>动态添加class <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><font color="#999AAA">css如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">自己写</code></pre><p><font color="#999AAA">js如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">$<span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">"这里是请求地址"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求的地址</span>        dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求你成功后返回数据的格式</span>        type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//请求的类型post或get</span>        <span class="token comment" spellcheck="true">//data:{"":""}, //需要加查询条件的时候用</span>        success<span class="token punctuation">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>cnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//()里面对应的就是后端传来的东西</span>            <span class="token comment" spellcheck="true">//用来接所有位数的数组</span>            var array <span class="token operator">=</span> new <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//先乘10排除只有一位数的情况</span>            <span class="token comment" spellcheck="true">// 判断几位数</span>            var daoxu<span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cnum<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>cnum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>               cnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>cnum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                daoxu <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>var j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   $<span class="token punctuation">(</span><span class="token string">"#chinanum"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" &lt;div class=\"number-item\">\n"</span> <span class="token operator">+</span>                       <span class="token string">"                        &lt;span>0&lt;/span>\n"</span> <span class="token operator">+</span>                       <span class="token string">"                    &lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>var k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   $<span class="token punctuation">(</span><span class="token string">"#chinanum"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" &lt;div class=\"number-item\">\n"</span> <span class="token operator">+</span>                       <span class="token string">"                        &lt;span style='color: #fcc117'>"</span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"&lt;/span>\n"</span> <span class="token operator">+</span>                       <span class="token string">"                    &lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>var k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   $<span class="token punctuation">(</span><span class="token string">"#chinanum"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" &lt;div class=\"number-item\">\n"</span> <span class="token operator">+</span>                       <span class="token string">"                        &lt;span style='color: #fcc117'>"</span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"&lt;/span>\n"</span> <span class="token operator">+</span>                       <span class="token string">"                    &lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>cnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color="#999AAA">以id选择器展示<br>追加内容： $("#div").append("里面写追加内容");<br>修改内容：document.getElementById("div").innerHTML="里面写追加内容";</font></font></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax格式模板</title>
      <link href="/posts/c28a.html"/>
      <url>/posts/c28a.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这个注释为springboot集成的注释，加上后面的produces那个属性可以直接将返回的数据转换为json格式，很方便</span>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"请求路径"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span></code></pre><p>这里配合后段传入的参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ajax格式，外面嵌套的为jquery方法，此方法在DOM 加载完毕之后执行</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">"这里是请求的路径"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求的地址</span>        dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//请求你成功后返回数据的格式</span>        type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//请求的类型post或get</span>        <span class="token comment" spellcheck="true">//data:{"":""}, //需要加查询条件的时候用</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>capitalLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//(对应后台传入的参数名)里面对应的就是后端传来的东西</span>        <span class="token comment" spellcheck="true">//一些方法体</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>capitalLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            supplierData<span class="token punctuation">.</span>data<span class="token operator">=</span>capitalLevel<span class="token punctuation">;</span>            <span class="token keyword">var</span> array <span class="token operator">=</span> handleBusinessChartData <span class="token punctuation">(</span>capitalLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            scaleChartData <span class="token operator">=</span> array<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            scaleChartInit<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis控制台错误信息整理</title>
      <link href="/posts/7c5a.html"/>
      <url>/posts/7c5a.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="一、关于mybatis"><a href="#一、关于mybatis" class="headerlink" title="一、关于mybatis"></a>一、关于mybatis</h1><h2 id="1-com-mysql-cj-exceptions-WrongArgumentException-SQL-String-cannot-be-empty"><a href="#1-com-mysql-cj-exceptions-WrongArgumentException-SQL-String-cannot-be-empty" class="headerlink" title="1.com.mysql.cj.exceptions.WrongArgumentException: SQL String cannot be empty"></a>1.com.mysql.cj.exceptions.WrongArgumentException: SQL String cannot be empty</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">你的mapper<span class="token punctuation">.</span>xml文件里有个语句只写了比如<span class="token operator">&lt;</span>select什么什么的标签<span class="token operator">></span>里面没有sql语句，吧sql语句补上。例：<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"我是id"</span> resultMap<span class="token operator">=</span><span class="token string">"我是结果集"</span><span class="token operator">></span>这里没写语句汇报这个错<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h2 id="2-Parameter-index-out-of-range-1-gt-number-of-parameters-which-is-0"><a href="#2-Parameter-index-out-of-range-1-gt-number-of-parameters-which-is-0" class="headerlink" title="2.Parameter index out of range (1 > number of parameters, which is 0)."></a>2.Parameter index out of range (1 &gt; number of parameters, which is 0).</h2><pre class=" language-c"><code class="language-c">你的mapper<span class="token punctuation">.</span>xml文件里有个语句的入参类型不对具体方式参考下图：#<span class="token punctuation">{</span><span class="token punctuation">}</span>与$<span class="token punctuation">{</span><span class="token punctuation">}</span>两者都可以在mybatis中用在输入映射#<span class="token punctuation">{</span><span class="token punctuation">}</span>和$<span class="token punctuation">{</span><span class="token punctuation">}</span>的区别<span class="token punctuation">:</span>#<span class="token punctuation">{</span><span class="token punctuation">}</span>是预编译处理，$<span class="token punctuation">{</span><span class="token punctuation">}</span>是字符串替换。mybatis在处理#<span class="token punctuation">{</span><span class="token punctuation">}</span>时，会将sql中的#<span class="token punctuation">{</span><span class="token punctuation">}</span>替换为<span class="token operator">?</span>号，调用PreparedStatement的set方法来赋值；mybatis在处理 $ <span class="token punctuation">{</span> <span class="token punctuation">}</span> 时，就是把 $<span class="token punctuation">{</span> <span class="token punctuation">}</span> 替换成变量的值，完成的是简单的字符串拼接。补充：在mybatis中使用#<span class="token punctuation">{</span><span class="token punctuation">}</span>可以防止sql注入，提高系统安全性。sql注入是什么：例如：用户输入的账号密码在代码中是以字符串拼接的方式生成查询语句的，这样用户输入的内容很容易改变我们的原查询代码，这就相当一一个数据库注入问题。我们验证密码和账号的时候，如果用户在输入密码的时候 输入 or <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>；那不管他输入的密码是什么都可以通过。  </code></pre><p><img src="/posts/7c5a/20200918135954439.png" alt="20200918135954439"></p><h2 id="3-Invalid-bound-statement-not-found"><a href="#3-Invalid-bound-statement-not-found" class="headerlink" title="3.Invalid bound statement (not found):"></a>3.Invalid bound statement (not found):</h2><pre class=" language-c"><code class="language-c">应该是你的配置文件<span class="token operator">*</span><span class="token punctuation">.</span>xml文件的路径错了</code></pre><h2 id="4-（很长一串最后是）Cause-java-lang-ClassNotFoundException-Cannot-find-class-bean-TabScddinfo"><a href="#4-（很长一串最后是）Cause-java-lang-ClassNotFoundException-Cannot-find-class-bean-TabScddinfo" class="headerlink" title="4.（很长一串最后是）Cause: java.lang.ClassNotFoundException: Cannot find class: bean.TabScddinfo"></a>4.（很长一串最后是）Cause: java.lang.ClassNotFoundException: Cannot find class: bean.TabScddinfo</h2><pre class=" language-c"><code class="language-c">这个问题最狗卡我将近一天，你那个mapper<span class="token punctuation">.</span>xml里注入的bean<span class="token operator">/</span>model类型没有根据路径映射进去，检查一下入参出参是不是写的都对。</code></pre><p>这里便于写作的时候复制格式</p><pre><code>## 2.模板格式&lt;font color=#999AAA &gt;代码如下（示例）：​```c这里便于写作的时候复制格式</code></pre><p><font color="#999AAA">该处使用的url网络请求的数据。</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color="#999AAA">提示：这里对文章进行总结：<br>例如：以上就是今天要讲的内容，本文仅仅简单介绍了pandas的使用，而pandas提供了大量能使我们快速便捷地处理数据的函数和方法。</font></p><font color="#999AAA"></font></font></font>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接取某个汉字前面的字符和hashmap的排序</title>
      <link href="/posts/b82d.html"/>
      <url>/posts/b82d.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">记录一次心得</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="#999AAA">上面给了一个查省份信息并输出数量的echarts图标功能，本来以为很简单一条数据的事，谁知道真写起来蛮复杂的。</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">提示：以下是本篇文章正文内容，下面案例可供参考</font></p><font color="#999AAA"><h1 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h1><p><img src="https://img-blog.csdnimg.cn/20200916094745918.png#pic_center" alt="在这里插入图片描述"></p><p><font color="#999AAA">如图片所示先写后台，前台代码不会放出。</font></p><font color="#999AAA"><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-分析库"><a href="#1-分析库" class="headerlink" title="1.分析库"></a>1.分析库</h2><p><font color="#999AAA">数据库内容（示例）：<br><img src="https://img-blog.csdnimg.cn/20200916094847619.png#pic_center" alt="在这里插入图片描述"><br>我去，你是认真的吗，我要的数据你怎么给我放一块了（心塞💔）。</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">看完数据库之后想法如下：<span class="token number">1</span><span class="token punctuation">.</span>首先数据库中取出该字段<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>然后判断是否为省，是否为一级城市<span class="token punctuation">.</span>并相应地截取省市字段去统计这个字段出现的次数<span class="token punctuation">.</span>（还有个最头疼的顺序问题！）<span class="token number">3</span><span class="token punctuation">.</span>将这个结果集保存为json传给前台<span class="token punctuation">.</span></code></pre><h2 id="2-执行第1条"><a href="#2-执行第1条" class="headerlink" title="2.执行第1条"></a>2.执行第1条</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">代入感很强，数据没查出来，数据库已经被我删干净了，查不到东西那就把能查到的都删掉。赠送神秘代码，公司虚拟机运行可获得升官发财奖励（不会真的有人尝试吧<span class="token operator">~</span>）<span class="token punctuation">:</span>rm <span class="token operator">-</span>rf</code></pre><h2 id="3-执行第2条"><a href="#3-执行第2条" class="headerlink" title="3.执行第2条"></a>3.执行第2条</h2><p><font color="#999AAA">然后判断是否为省，是否为一级城市.<br>并相应地截取省市字段去统计这个字段出现的次数.：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">        <span class="token comment" spellcheck="true">//声明一个接取值的map</span>        HashMap<span class="token operator">&lt;</span>类型<span class="token punctuation">,</span>类型<span class="token operator">></span> result  <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>类型<span class="token punctuation">,</span>类型<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接取值</span>        List<span class="token operator">&lt;</span>马赛克<span class="token operator">></span> g <span class="token operator">=</span> 数据库查询<span class="token punctuation">;</span>        String province <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计每个区域出现的词条及次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取地址名称</span>            String gg <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>我是一条bean属性<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接取前先判断是否为省或一级城市</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"省"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//为省拼接字符串</span>                province <span class="token operator">=</span> gg<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>gg<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"省"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"省"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>gg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"市"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//为市拼接字符串</span>                province <span class="token operator">=</span> gg<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>gg<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"市"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"市"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//非省市不用处理</span>                province <span class="token operator">=</span> gg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//下面为统计每个词条出现的次数，有则value+1，没有就value放1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>province<span class="token punctuation">,</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>province<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="4-执行第3条"><a href="#4-执行第3条" class="headerlink" title="4.执行第3条"></a>4.执行第3条</h2><p><font color="#999AAA">别忘了对你的hashmap进行排序（我都写好了，快点去生成工具类！叫爸爸！）（ok！这个是纠正代码，map在转换为json之后是没有顺序的，所以要换种方法，声明一个vo的bean类专门作为取值用然后将这个bean放在list里面之后转json提交给前台以下对hashmap代码排序无用，同时给出第二种方法，在数据库里直接查这样简单些）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//对hashmap进行排序</span>    public <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token function">sortHashMap</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//從HashMap中恢復entry集合，得到全部的鍵值對集合</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> entey <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//將Set集合轉為List集合，為了實用工具類的排序方法</span>        List<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span>entey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用Collections工具類對list進行排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> new Comparator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            public <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> o1<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//倒敘排列正序下面到换位置</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//創建一個HashMap的子類LinkedHashMap集合</span>        LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> linkedHashMap <span class="token operator">=</span> new LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//將list中的數據存入LinkedHashMap中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry<span class="token punctuation">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> linkedHashMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">selecttmp<span class="token punctuation">.</span>sheng<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>sheng<span class="token punctuation">)</span> as count <span class="token function">from</span> <span class="token punctuation">(</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">case</span>when 表名 like <span class="token string">'%省%'</span> then <span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">substring_index</span><span class="token punctuation">(</span>表名<span class="token punctuation">,</span><span class="token string">'省'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'省'</span><span class="token punctuation">)</span>when 表名 like <span class="token string">'%自治区%'</span> then <span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">substring_index</span><span class="token punctuation">(</span>表名<span class="token punctuation">,</span><span class="token string">'自治区'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'自治区'</span><span class="token punctuation">)</span>when 表名 like <span class="token string">'%市%'</span>then <span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">substring_index</span><span class="token punctuation">(</span>表名<span class="token punctuation">,</span><span class="token string">'市'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'市'</span><span class="token punctuation">)</span>end<span class="token punctuation">)</span> as shengfrom gg_ksda<span class="token punctuation">)</span> tmpgroup by tmp<span class="token punctuation">.</span>shengorder by <span class="token function">count</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>sheng<span class="token punctuation">)</span> DESC</code></pre><p><font color="#999AAA">自己转json：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">代入感很强👍我已经开始报错了，马上准备删库跑人。这里有个小技巧：@<span class="token function">RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"请求名称"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>后面的这个produces 属性可以直接将返回的参数以jsonarray或者json的形式提交给前台，非常方便。</code></pre><p><font color="#999AAA">我是一条小尾巴。。。</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color="#999AAA">收获挺多的总来点细节（没有细节的话不就分手了吗）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token function">contain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>与<span class="token function">inIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>都可以判断一串字符串中是否有某个字符，那两者有什么区别呢？String<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">"字符或字符串"</span><span class="token punctuation">)</span>是判断List是否包含某个对象成员，返回布尔类型。（性格爽快，你问有没有，人家直接就告诉你有没有，丝毫不拖沓）String<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>是判断对象在该list里面的位置，没有返回<span class="token operator">-</span><span class="token number">1</span>，有的话返回索引位置。（小心思细腻，你问有没有人家会告诉你在哪里方便你去找，没有的话他就告诉你在外太空（<span class="token operator">-</span><span class="token number">1</span>）哈哈）json转换：@<span class="token function">RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"请求名称"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>后面的这个produces 属性可以直接将返回的参数以jsonarray或者json的形式提交给前台，非常方便。</code></pre></font></font></font></font></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div+css+js实现渐变色根据按百分比显示的横向柱状图</title>
      <link href="/posts/d124.html"/>
      <url>/posts/d124.html</url>
      
        <content type="html"><![CDATA[<h1 id="div-css-js实现渐变色根据按百分比显示的横向柱状图"><a href="#div-css-js实现渐变色根据按百分比显示的横向柱状图" class="headerlink" title="div+css+js实现渐变色根据按百分比显示的横向柱状图"></a>div+css+js实现渐变色根据按百分比显示的横向柱状图</h1><p><font color="#999AAA">echarts完成不了我的需求，尝试用最原始的方法画一个横向渐变色柱状图</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">一起加油</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="#999AAA">echarts完成不了我的需求，尝试用最原始的方法画一个横向渐变色柱状图</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><p><font color="#999AAA">提示：以下是本篇文章正文内容，下面案例可供参考</font></p><font color="#999AAA"><h1 id="一、目标展示？"><a href="#一、目标展示？" class="headerlink" title="一、目标展示？"></a>一、目标展示？</h1><p><img src="/posts/d124/20200904103915496.png" alt="20200904103915496"><br>没错，又是这张图，可以看到用echarts的话左边图片不好对其而且鼠标悬浮背景色的柱子会出现前面柱子被隐藏的情况，下面用最原始的方法做一下。</p><p><font color="#999AAA">示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。</font></p><font color="#999AAA"><h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="1-js"><a href="#1-js" class="headerlink" title="1.js"></a>1.js</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>script<span class="token operator">></span>            function <span class="token function">rbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取div背景长度</span>                var rbcwidth <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rbcbar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var rmaxlength <span class="token operator">=</span> rbcwidth<span class="token punctuation">.</span>clientWidth<span class="token operator">||</span>rbcwidth<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置最大值</span>                var rmaxvalue <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取货物数量柱状图id</span>                var rbar <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rightbar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取显示货物名称div的id</span>                var rname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rightname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取货物数量库存id</span>                var rnum <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pronum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示货物名称给参 </span>                var rightname <span class="token operator">=</span> <span class="token string">"产品"</span><span class="token punctuation">;</span>                var rightnum <span class="token operator">=</span><span class="token number">380</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出文字</span>                rname<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> rightname<span class="token punctuation">;</span>                rnum<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> rightnum<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//规定右边div长度</span>                var rbarwidth <span class="token operator">=</span> rightnum<span class="token operator">/</span>rmaxvalue<span class="token operator">*</span>rmaxlength<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>rbarwidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//内长度</span>                rbar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> rbarwidth <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示货物数量给参</span>                                <span class="token comment" spellcheck="true">//测试</span><span class="token comment" spellcheck="true">/*alert(maxvalue);                document.getElementById("sss").innerHTML=Date();*/</span>                <span class="token comment" spellcheck="true">//json</span>                <span class="token comment" spellcheck="true">/*var text = '{ "sites" : [' +                    '{ "name":"Runoob" , "num":"234" },' +                    '{ "name":"Google" , "num":"122" },' +                    '{ "name":"Taobao" , "num":"234" } ]}';                    obj = JSON.parse(text);                document.getElementById("demo").innerHTML = obj.sites[1].name + " " + obj.sites[1].url;*/</span>                            <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="2-html"><a href="#2-html" class="headerlink" title="2.html"></a>2.html</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rtright"</span> style<span class="token operator">=</span><span class="token string">"float: left;height: 140%;width: 420px;margin-left: 20px;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>一行柱状图<span class="token operator">--</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"barout"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width: 32px;height: 32px;background-image: url(test/img/cycle.png);background-size: 100%;background-repeat: no-repeat;float: left;"</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"barout-img"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>名称<span class="token operator">--</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rightname"</span> class<span class="token operator">=</span><span class="token string">"baroutname"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rbcbar"</span> class<span class="token operator">=</span><span class="token string">"bcbar"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rightbar"</span> class<span class="token operator">=</span><span class="token string">"barinbar"</span>  style<span class="token operator">=</span><span class="token string">"background-image: linear-gradient(90deg, #29cefe 0%, #ee981a 100%);"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数量<span class="token operator">--</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"pronum"</span> class<span class="token operator">=</span><span class="token string">"barnum"</span> style<span class="token operator">=</span><span class="token string">"color: #FFFFFF;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><font color="#999AAA">应该可以了，不行的话私我<br>效果：<img src="/posts/d124/20200904104421468.png" alt="20200904104421468"><br>自己去用什么标签循环出来吧。加油。</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color="#999AAA">一个好的思路真就比傻干省事多了</font></font></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> eCharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js快速入门文档</title>
      <link href="/posts/d0e1.html"/>
      <url>/posts/d0e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="js学习目录"><a href="#js学习目录" class="headerlink" title="js学习目录"></a>js学习目录</h1><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;">文章摘自<blockquote><p><a href="https://www.runoob.com/js/js-syntax.html">菜鸟教程</a>.</p></blockquote><h1 id="一、js是什么？做什么？"><a href="#一、js是什么？做什么？" class="headerlink" title="一、js是什么？做什么？"></a>一、js是什么？做什么？</h1><p>JavaScript 是 Web 的编程语言。<br>所有现代的 HTML 页面都使用 JavaScript。<br><strong>HTML 定义了网页的布局。<br>CSS 描述了网页的样式（个人理解class标记样式，id标记js）。<br>JavaScript 网页的行为。</strong></p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-快速上手（上面加粗前两行理解后快速做项目）？"><a href="#1-快速上手（上面加粗前两行理解后快速做项目）？" class="headerlink" title="1.快速上手（上面加粗前两行理解后快速做项目）？"></a>1.快速上手（上面加粗前两行理解后快速做项目）？</h2><h6 id="1-输出文本内容"><a href="#1-输出文本内容" class="headerlink" title="(1)输出文本内容"></a>(1)输出文本内容</h6><p>alert(“弹框显示”);<br>document.write(“要输出的内容或参数”);<br>console.log（“控制台输出”)；</p><h6 id="2-修改文本内容（其他方式自行百度）"><a href="#2-修改文本内容（其他方式自行百度）" class="headerlink" title="(2)修改文本内容（其他方式自行百度）"></a>(2)修改文本内容（其他方式自行百度）</h6><p>document.getElementById(“这里填想要改变的div的id”).innerHTML=”修改后的内容”;</p><h6 id="3-修改div样式（以下内容最好在一个js函数内执行）"><a href="#3-修改div样式（以下内容最好在一个js函数内执行）" class="headerlink" title="(3)修改div样式（以下内容最好在一个js函数内执行）"></a>(3)修改div样式（以下内容最好在一个js函数内执行）</h6><pre><code>    var bcwidth = document.getElementById("目标id");//先获取目标这里用id获取得到参数（这里可以理解为可编辑的对象）    bcwidth .style.width = 12 + 'px';//这种表达形式大差不差，可以根据自己的需要百度</code></pre><p>对于第二行的解释：拼字符串的形式去拼接div，视图解析器会将这段字符串处理为h5语言，要注意拼接字符串的方法与java相同，格式为</p><blockquote><p>参数+“字符串”+参数+“字符串”+参数<br>例如：var nessage = “a的数量为”+a+“个”；</p></blockquote><p><a href="https://www.cnblogs.com/tylerdonet/p/4797103.html">document的其他用法</a>.</p><h2 id="2-js语法？"><a href="#2-js语法？" class="headerlink" title="2.js语法？"></a>2.js语法？</h2><p>代码块</p><h6 id="1-数字（Number）：可以是整数小数或科学计数。"><a href="#1-数字（Number）：可以是整数小数或科学计数。" class="headerlink" title="(1) 数字（Number）：可以是整数小数或科学计数。"></a>(1) 数字（Number）：可以是整数小数或科学计数。</h6><pre><code>    3.14    1001    123e</code></pre><h6 id="2-字符串（String）：单-x2F-双引号引起来。"><a href="#2-字符串（String）：单-x2F-双引号引起来。" class="headerlink" title="(2)字符串（String）：单/双引号引起来。"></a>(2)字符串（String）：单/双引号引起来。</h6><pre><code>    "stringaa"    'sa@~12343'</code></pre><h6 id="3-运算符"><a href="#3-运算符" class="headerlink" title="(3)运算符"></a>(3)运算符</h6><pre><code>    赋值，算术运算符有        =  +  -  *  /    条件比较及逻辑运算符        ==  != &lt;  &gt; </code></pre><h6 id="4-定义类型"><a href="#4-定义类型" class="headerlink" title="(4)定义类型"></a>(4)定义类型</h6><pre><code>    //与其他语言的开发不一样，js一般都用只var来声明参数    //等号右边也可以为表达式    var length = 16;         // Number 通过数字字面量赋值    var points = x * 10;     // Number 通过表达式字面量赋值    var lastName = "Johnson";     // String 通过字符串字面量赋值    var cars = ["Saab", "Volvo", "BMW"]; // Array  通过数组字面量赋值    var person = {firstName:"John", lastName:"Doe"};  // Object 通过对象 字面量赋值</code></pre><h6 id="5-js的数据类型会自我转换"><a href="#5-js的数据类型会自我转换" class="headerlink" title="(5)js的数据类型会自我转换"></a>(5)js的数据类型会自我转换</h6><pre><code>    基本就是谁跟字符串类型都会变成字符串类型</code></pre><h6 id="6-注意JavaScript-字母大小写"><a href="#6-注意JavaScript-字母大小写" class="headerlink" title="(6)注意JavaScript 字母大小写"></a>(6)注意JavaScript 字母大小写</h6><pre><code>    JavaScript 对大小写是敏感的。    当编写 JavaScript 语句时，请留意是否关闭大小写切换键。    函数 getElementById 与 getElementbyID 是不同的。    同样，变量 myVariable 与 MyVariable 也是不同的。</code></pre><h6 id="7-js函数模板"><a href="#7-js函数模板" class="headerlink" title="(7)js函数模板"></a>(7)js函数模板</h6><pre><code>    &lt;script&gt;            //定义参数            var name = 这里参考（4）定义类型            //定义函数            function 这里写函数名 (a,b,c,d)｛//括号内为传入的参数，也可以不传参            //这里也可以定义参数，使用任何表达式            //这里也可以写入    1.快速入手   里的东西对div的内容与样式进行编辑            return x；//x为返回值，可以是任何类型，也可以无返回值            ｝    &lt;/script&gt;</code></pre><h6 id="8-如何调用js函数"><a href="#8-如何调用js函数" class="headerlink" title="(8)如何调用js函数"></a>(8)如何调用js函数</h6><p><a href="https://www.w3school.com.cn/tags/html_ref_eventattributes.asp">查看具体的事件请点我</a>.<br>        在对应事件哪里调用例如 onclick=”对应函数的函数名” 这里就是对一个点击事件调用js的调用。<br>        延伸（预加载）：有些函数需要在网页加载的时候就被启用，这种方式有<br>                body onload=”func1();func2();func3();”<br>                在html的body调用函数，此处可以调用多个。<br>                其他方式自己百度，这个就够用了。</p><h6 id="9-代码规范"><a href="#9-代码规范" class="headerlink" title="(9)代码规范"></a>(9)代码规范</h6><pre><code>js会忽略多余的空格例（合理的排列不会出现少括号的情况也便于代码的阅读）：    var person="runoob";    var person = "runoob";    这两者的作用是相同的    添加注释(该操作便于对代码的第二次维护)：    alt/shift+/    **代码知识普及：**    JavaScript 代码是 JavaScript 语句的序列。    浏览器按照编写顺序依次执行每条语句。    例：    document.getElementById("demo").innerHTML="你好 Dolly";    document.getElementById("demo").innerHTML="你最近怎么样?";    按顺序执行最后demo显示的信息为你最近怎么样    **代码块知识普及：**    JavaScript 可以分批地组合起来。    代码块以左花括号开始，以右花括号结束。    代码块的作用是一并地执行语句序列。    本例向网页输出一个标题和两个段落：    function myFunction()    {    document.getElementById("demo").innerHTML="你好Dolly";    document.getElementById("myDIV").innerHTML="你最近怎么样?";    }    这是一个代码块</code></pre><p><font color="#999AAA">下面还没写（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">import numpy as npimport pandas as pdimport matplotlib<span class="token punctuation">.</span>pyplot as pltimport seaborn as snsimport warningswarnings<span class="token punctuation">.</span><span class="token function">filterwarnings</span><span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>import  sslssl<span class="token punctuation">.</span>_create_default_https_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>_create_unverified_context</code></pre><h2 id="2-读入数据"><a href="#2-读入数据" class="headerlink" title="2.读入数据"></a>2.读入数据</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c">data <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">read_csv</span><span class="token punctuation">(</span>    <span class="token string">'https://labfile.oss.aliyuncs.com/courses/1283/adult.data.csv'</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><font color="#999AAA">该处使用的url网络请求的数据。</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color="#999AAA">提示：这里对文章进行总结：<br>例如：以上就是今天要讲的内容，本文仅仅简单介绍了pandas的使用，而pandas提供了大量能使我们快速便捷地处理数据的函数和方法。</font></p><font color="#999AAA"></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts横向柱状图渐变色</title>
      <link href="/posts/267e.html"/>
      <url>/posts/267e.html</url>
      
        <content type="html"><![CDATA[<p><font color="#999AAA">提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档</font></p><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="echarts横向柱状图"><a href="#echarts横向柱状图" class="headerlink" title="echarts横向柱状图"></a>echarts横向柱状图</h1><p><font color="#999AAA">一个简单的样式</font></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="一、样式？"><a href="#一、样式？" class="headerlink" title="一、样式？"></a>一、样式？</h1><p><img src="/posts/267e/20200829105341614.png" alt="20200829105341614"></p><p><font color="#999AAA">示例：样式其实一样就是改了颜色</font></p><font color="#999AAA"><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span> name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0,user-scalable=no,maximum-scale=1.0"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Bootstrap <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"test/css/bootstrap.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> media<span class="token operator">=</span><span class="token string">"screen"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> jQuery文件。务必在bootstrap<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js 之前引入 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 包括所有已编译的插件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"test/js/bootstrap.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入 echarts<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/echarts.min.js"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="2-html-js"><a href="#2-html-js" class="headerlink" title="2.html+js"></a>2.html+js</h2><p><font color="#999AAA">代码如下（示例）：</font></p><font color="#999AAA"><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rtleft"</span> style<span class="token operator">=</span><span class="token string">"float: left;height: 100%;width: 420px;margin-left: 20px;margin-top: -50px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>右上靠左<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 基于准备好的dom，初始化echarts实例</span>        var myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'rtleft'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定图表的配置项和数据</span>        var option <span class="token operator">=</span> <span class="token punctuation">{</span>            dataset<span class="token punctuation">:</span> <span class="token punctuation">{</span>                source<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token string">'product'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">89.3</span><span class="token punctuation">,</span> <span class="token number">58212</span><span class="token punctuation">,</span> <span class="token string">'业务员1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">57.1</span><span class="token punctuation">,</span> <span class="token number">78254</span><span class="token punctuation">,</span> <span class="token string">'业务员2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">74.4</span><span class="token punctuation">,</span> <span class="token number">41032</span><span class="token punctuation">,</span> <span class="token string">'业务员3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">50.1</span><span class="token punctuation">,</span> <span class="token number">12755</span><span class="token punctuation">,</span> <span class="token string">'业务员4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">52.1</span><span class="token punctuation">,</span> <span class="token number">12055</span><span class="token punctuation">,</span> <span class="token string">'业务员6'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                grid<span class="token punctuation">:</span> <span class="token punctuation">{</span>containLabel<span class="token punctuation">:</span> true<span class="token punctuation">}</span><span class="token punctuation">,</span>                xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'amount'</span><span class="token punctuation">,</span>                        show<span class="token punctuation">:</span>false<span class="token punctuation">}</span><span class="token punctuation">,</span>                yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    inverse<span class="token punctuation">:</span>true<span class="token punctuation">,</span>                    type<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                    axisLine<span class="token punctuation">:</span><span class="token punctuation">{</span>                           show<span class="token punctuation">:</span>false<span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    axisTick<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        show<span class="token punctuation">:</span> false<span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    axisLabel<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        show<span class="token punctuation">:</span> true<span class="token punctuation">,</span>                        textStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            color<span class="token punctuation">:</span><span class="token string">'#fff'</span>  <span class="token comment" spellcheck="true">//这里用参数代替了</span>                        <span class="token punctuation">}</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    type<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                    encode<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Map the "amount" column to X axis.</span>                    x<span class="token punctuation">:</span> <span class="token string">'amount'</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// Map the "product" column to Y axis</span>                    y<span class="token punctuation">:</span> <span class="token string">'product'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                itemStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//通常情况下：</span>                    normal<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    barBorderRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                    color<span class="token punctuation">:</span> new echarts<span class="token punctuation">.</span>graphic<span class="token punctuation">.</span><span class="token function">LinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                        offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        color<span class="token punctuation">:</span> <span class="token string">'#2cccfd'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                        offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        color<span class="token punctuation">:</span> <span class="token string">'#fc5a5a'</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    shadowColor<span class="token punctuation">:</span> <span class="token string">'rgba(0, 0, 0, 0.4)'</span><span class="token punctuation">,</span>                    shadowBlur<span class="token punctuation">:</span> <span class="token number">20</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                label<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    show<span class="token punctuation">:</span> true<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启显示</span>                    position<span class="token punctuation">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//在上方显示</span>                    textStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//数值样式</span>                      color<span class="token punctuation">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>                      fontSize<span class="token punctuation">:</span> <span class="token string">'12'</span>                      <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用刚指定的配置项和数据显示图表。</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><font color="#999AAA">LinearGradient（）用来控制家变色及方向后面的四个数控制方向，具体自己百度</font></p><font color="#999AAA"><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1&quot;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color="#999AAA">拿走的朋友说一下我看看到底帮到了多少人，谢谢了，我还是菜得离谱。</font></p><font color="#999AAA"></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> Js </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
